
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ec  080029ec  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080029ec  080029ec  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029ec  080029ec  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080029f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000060  08002a54  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002a54  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ce6  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9c  00000000  00000000  00028d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002b288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f06  00000000  00000000  0002bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bee0  00000000  00000000  00042af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082507  00000000  00000000  0004e9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0edd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000d0f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080029b4 	.word	0x080029b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080029b4 	.word	0x080029b4

0800014c <display7SEG>:
 *  Created on: Nov 1, 2022
 *      Author: ASUS
 */
#include "7segment_led.h"

void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	switch(num) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	  case 0:
	    	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b5      	ldr	r0, [pc, #724]	; (8000468 <display7SEG+0x31c>)
 8000192:	f001 fbe6 	bl	8001962 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b3      	ldr	r0, [pc, #716]	; (8000468 <display7SEG+0x31c>)
 800019c:	f001 fbe1 	bl	8001962 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48b0      	ldr	r0, [pc, #704]	; (8000468 <display7SEG+0x31c>)
 80001a6:	f001 fbdc 	bl	8001962 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ae      	ldr	r0, [pc, #696]	; (8000468 <display7SEG+0x31c>)
 80001b0:	f001 fbd7 	bl	8001962 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48ab      	ldr	r0, [pc, #684]	; (8000468 <display7SEG+0x31c>)
 80001ba:	f001 fbd2 	bl	8001962 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a9      	ldr	r0, [pc, #676]	; (8000468 <display7SEG+0x31c>)
 80001c4:	f001 fbcd 	bl	8001962 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a6      	ldr	r0, [pc, #664]	; (8000468 <display7SEG+0x31c>)
 80001ce:	f001 fbc8 	bl	8001962 <HAL_GPIO_WritePin>
		  	break;
 80001d2:	e144      	b.n	800045e <display7SEG+0x312>
	  case 1:
		    HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a3      	ldr	r0, [pc, #652]	; (8000468 <display7SEG+0x31c>)
 80001da:	f001 fbc2 	bl	8001962 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a1      	ldr	r0, [pc, #644]	; (8000468 <display7SEG+0x31c>)
 80001e4:	f001 fbbd 	bl	8001962 <HAL_GPIO_WritePin>
		   	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489e      	ldr	r0, [pc, #632]	; (8000468 <display7SEG+0x31c>)
 80001ee:	f001 fbb8 	bl	8001962 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489c      	ldr	r0, [pc, #624]	; (8000468 <display7SEG+0x31c>)
 80001f8:	f001 fbb3 	bl	8001962 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4899      	ldr	r0, [pc, #612]	; (8000468 <display7SEG+0x31c>)
 8000202:	f001 fbae 	bl	8001962 <HAL_GPIO_WritePin>
		   	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4897      	ldr	r0, [pc, #604]	; (8000468 <display7SEG+0x31c>)
 800020c:	f001 fba9 	bl	8001962 <HAL_GPIO_WritePin>
		   	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4894      	ldr	r0, [pc, #592]	; (8000468 <display7SEG+0x31c>)
 8000216:	f001 fba4 	bl	8001962 <HAL_GPIO_WritePin>
		  	break;
 800021a:	e120      	b.n	800045e <display7SEG+0x312>
	  case 2:
		    HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4891      	ldr	r0, [pc, #580]	; (8000468 <display7SEG+0x31c>)
 8000222:	f001 fb9e 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488f      	ldr	r0, [pc, #572]	; (8000468 <display7SEG+0x31c>)
 800022c:	f001 fb99 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488c      	ldr	r0, [pc, #560]	; (8000468 <display7SEG+0x31c>)
 8000236:	f001 fb94 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	488a      	ldr	r0, [pc, #552]	; (8000468 <display7SEG+0x31c>)
 8000240:	f001 fb8f 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4887      	ldr	r0, [pc, #540]	; (8000468 <display7SEG+0x31c>)
 800024a:	f001 fb8a 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4885      	ldr	r0, [pc, #532]	; (8000468 <display7SEG+0x31c>)
 8000254:	f001 fb85 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4882      	ldr	r0, [pc, #520]	; (8000468 <display7SEG+0x31c>)
 800025e:	f001 fb80 	bl	8001962 <HAL_GPIO_WritePin>
		   	break;
 8000262:	e0fc      	b.n	800045e <display7SEG+0x312>
	  case 3:
		  	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487f      	ldr	r0, [pc, #508]	; (8000468 <display7SEG+0x31c>)
 800026a:	f001 fb7a 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487d      	ldr	r0, [pc, #500]	; (8000468 <display7SEG+0x31c>)
 8000274:	f001 fb75 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	487a      	ldr	r0, [pc, #488]	; (8000468 <display7SEG+0x31c>)
 800027e:	f001 fb70 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4878      	ldr	r0, [pc, #480]	; (8000468 <display7SEG+0x31c>)
 8000288:	f001 fb6b 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4875      	ldr	r0, [pc, #468]	; (8000468 <display7SEG+0x31c>)
 8000292:	f001 fb66 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4873      	ldr	r0, [pc, #460]	; (8000468 <display7SEG+0x31c>)
 800029c:	f001 fb61 	bl	8001962 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	4870      	ldr	r0, [pc, #448]	; (8000468 <display7SEG+0x31c>)
 80002a6:	f001 fb5c 	bl	8001962 <HAL_GPIO_WritePin>
		  	break;
 80002aa:	e0d8      	b.n	800045e <display7SEG+0x312>
	  case 4:
		  	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486d      	ldr	r0, [pc, #436]	; (8000468 <display7SEG+0x31c>)
 80002b2:	f001 fb56 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486b      	ldr	r0, [pc, #428]	; (8000468 <display7SEG+0x31c>)
 80002bc:	f001 fb51 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4868      	ldr	r0, [pc, #416]	; (8000468 <display7SEG+0x31c>)
 80002c6:	f001 fb4c 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4866      	ldr	r0, [pc, #408]	; (8000468 <display7SEG+0x31c>)
 80002d0:	f001 fb47 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4863      	ldr	r0, [pc, #396]	; (8000468 <display7SEG+0x31c>)
 80002da:	f001 fb42 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4861      	ldr	r0, [pc, #388]	; (8000468 <display7SEG+0x31c>)
 80002e4:	f001 fb3d 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485e      	ldr	r0, [pc, #376]	; (8000468 <display7SEG+0x31c>)
 80002ee:	f001 fb38 	bl	8001962 <HAL_GPIO_WritePin>
		    break;
 80002f2:	e0b4      	b.n	800045e <display7SEG+0x312>
	  case 5:
		    HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485b      	ldr	r0, [pc, #364]	; (8000468 <display7SEG+0x31c>)
 80002fa:	f001 fb32 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4859      	ldr	r0, [pc, #356]	; (8000468 <display7SEG+0x31c>)
 8000304:	f001 fb2d 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4856      	ldr	r0, [pc, #344]	; (8000468 <display7SEG+0x31c>)
 800030e:	f001 fb28 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4854      	ldr	r0, [pc, #336]	; (8000468 <display7SEG+0x31c>)
 8000318:	f001 fb23 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4851      	ldr	r0, [pc, #324]	; (8000468 <display7SEG+0x31c>)
 8000322:	f001 fb1e 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484f      	ldr	r0, [pc, #316]	; (8000468 <display7SEG+0x31c>)
 800032c:	f001 fb19 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484c      	ldr	r0, [pc, #304]	; (8000468 <display7SEG+0x31c>)
 8000336:	f001 fb14 	bl	8001962 <HAL_GPIO_WritePin>
	  	    break;
 800033a:	e090      	b.n	800045e <display7SEG+0x312>
	  case 6:
		  	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4849      	ldr	r0, [pc, #292]	; (8000468 <display7SEG+0x31c>)
 8000342:	f001 fb0e 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4847      	ldr	r0, [pc, #284]	; (8000468 <display7SEG+0x31c>)
 800034c:	f001 fb09 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4844      	ldr	r0, [pc, #272]	; (8000468 <display7SEG+0x31c>)
 8000356:	f001 fb04 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4842      	ldr	r0, [pc, #264]	; (8000468 <display7SEG+0x31c>)
 8000360:	f001 faff 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483f      	ldr	r0, [pc, #252]	; (8000468 <display7SEG+0x31c>)
 800036a:	f001 fafa 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483d      	ldr	r0, [pc, #244]	; (8000468 <display7SEG+0x31c>)
 8000374:	f001 faf5 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	483a      	ldr	r0, [pc, #232]	; (8000468 <display7SEG+0x31c>)
 800037e:	f001 faf0 	bl	8001962 <HAL_GPIO_WritePin>
		    break;
 8000382:	e06c      	b.n	800045e <display7SEG+0x312>
	  case 7:
	  		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4837      	ldr	r0, [pc, #220]	; (8000468 <display7SEG+0x31c>)
 800038a:	f001 faea 	bl	8001962 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4835      	ldr	r0, [pc, #212]	; (8000468 <display7SEG+0x31c>)
 8000394:	f001 fae5 	bl	8001962 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4832      	ldr	r0, [pc, #200]	; (8000468 <display7SEG+0x31c>)
 800039e:	f001 fae0 	bl	8001962 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	4830      	ldr	r0, [pc, #192]	; (8000468 <display7SEG+0x31c>)
 80003a8:	f001 fadb 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482d      	ldr	r0, [pc, #180]	; (8000468 <display7SEG+0x31c>)
 80003b2:	f001 fad6 	bl	8001962 <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482b      	ldr	r0, [pc, #172]	; (8000468 <display7SEG+0x31c>)
 80003bc:	f001 fad1 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4828      	ldr	r0, [pc, #160]	; (8000468 <display7SEG+0x31c>)
 80003c6:	f001 facc 	bl	8001962 <HAL_GPIO_WritePin>
	  		break;
 80003ca:	e048      	b.n	800045e <display7SEG+0x312>
	  case 8:
		    HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	4825      	ldr	r0, [pc, #148]	; (8000468 <display7SEG+0x31c>)
 80003d2:	f001 fac6 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2104      	movs	r1, #4
 80003da:	4823      	ldr	r0, [pc, #140]	; (8000468 <display7SEG+0x31c>)
 80003dc:	f001 fac1 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2108      	movs	r1, #8
 80003e4:	4820      	ldr	r0, [pc, #128]	; (8000468 <display7SEG+0x31c>)
 80003e6:	f001 fabc 	bl	8001962 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2110      	movs	r1, #16
 80003ee:	481e      	ldr	r0, [pc, #120]	; (8000468 <display7SEG+0x31c>)
 80003f0:	f001 fab7 	bl	8001962 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2120      	movs	r1, #32
 80003f8:	481b      	ldr	r0, [pc, #108]	; (8000468 <display7SEG+0x31c>)
 80003fa:	f001 fab2 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	4819      	ldr	r0, [pc, #100]	; (8000468 <display7SEG+0x31c>)
 8000404:	f001 faad 	bl	8001962 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2101      	movs	r1, #1
 800040c:	4816      	ldr	r0, [pc, #88]	; (8000468 <display7SEG+0x31c>)
 800040e:	f001 faa8 	bl	8001962 <HAL_GPIO_WritePin>

		    break;
 8000412:	e024      	b.n	800045e <display7SEG+0x312>
	  case 9:
	  		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4813      	ldr	r0, [pc, #76]	; (8000468 <display7SEG+0x31c>)
 800041a:	f001 faa2 	bl	8001962 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <display7SEG+0x31c>)
 8000424:	f001 fa9d 	bl	8001962 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <display7SEG+0x31c>)
 800042e:	f001 fa98 	bl	8001962 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <display7SEG+0x31c>)
 8000438:	f001 fa93 	bl	8001962 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <display7SEG+0x31c>)
 8000442:	f001 fa8e 	bl	8001962 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4807      	ldr	r0, [pc, #28]	; (8000468 <display7SEG+0x31c>)
 800044c:	f001 fa89 	bl	8001962 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <display7SEG+0x31c>)
 8000456:	f001 fa84 	bl	8001962 <HAL_GPIO_WritePin>
	  	    break;
 800045a:	e000      	b.n	800045e <display7SEG+0x312>
	  default:
		  	break;
 800045c:	bf00      	nop
	}

}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010c00 	.word	0x40010c00

0800046c <update7SEG>:


int index_led = 0;
int led_buffer [4] = {0 , 0 , 0 , 0};
void update7SEG ( int index ) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	switch ( index ) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b03      	cmp	r3, #3
 8000478:	d87a      	bhi.n	8000570 <update7SEG+0x104>
 800047a:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <update7SEG+0x14>)
 800047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000480:	08000491 	.word	0x08000491
 8000484:	080004c9 	.word	0x080004c9
 8000488:	08000501 	.word	0x08000501
 800048c:	08000539 	.word	0x08000539
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	4839      	ldr	r0, [pc, #228]	; (800057c <update7SEG+0x110>)
 8000496:	f001 fa64 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a0:	4836      	ldr	r0, [pc, #216]	; (800057c <update7SEG+0x110>)
 80004a2:	f001 fa5e 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ac:	4833      	ldr	r0, [pc, #204]	; (800057c <update7SEG+0x110>)
 80004ae:	f001 fa58 	bl	8001962 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 80004b2:	4b33      	ldr	r3, [pc, #204]	; (8000580 <update7SEG+0x114>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fe48 	bl	800014c <display7SEG>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	482e      	ldr	r0, [pc, #184]	; (800057c <update7SEG+0x110>)
 80004c2:	f001 fa4e 	bl	8001962 <HAL_GPIO_WritePin>
		break ;
 80004c6:	e054      	b.n	8000572 <update7SEG+0x106>
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	482b      	ldr	r0, [pc, #172]	; (800057c <update7SEG+0x110>)
 80004ce:	f001 fa48 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	4828      	ldr	r0, [pc, #160]	; (800057c <update7SEG+0x110>)
 80004da:	f001 fa42 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e4:	4825      	ldr	r0, [pc, #148]	; (800057c <update7SEG+0x110>)
 80004e6:	f001 fa3c 	bl	8001962 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 80004ea:	4b25      	ldr	r3, [pc, #148]	; (8000580 <update7SEG+0x114>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fe2c 	bl	800014c <display7SEG>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	4820      	ldr	r0, [pc, #128]	; (800057c <update7SEG+0x110>)
 80004fa:	f001 fa32 	bl	8001962 <HAL_GPIO_WritePin>
		break ;
 80004fe:	e038      	b.n	8000572 <update7SEG+0x106>
		case 2:
			// Display the third 7 SEG with led_buffer [2]
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	481d      	ldr	r0, [pc, #116]	; (800057c <update7SEG+0x110>)
 8000506:	f001 fa2c 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2140      	movs	r1, #64	; 0x40
 800050e:	481b      	ldr	r0, [pc, #108]	; (800057c <update7SEG+0x110>)
 8000510:	f001 fa27 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051a:	4818      	ldr	r0, [pc, #96]	; (800057c <update7SEG+0x110>)
 800051c:	f001 fa21 	bl	8001962 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <update7SEG+0x114>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff fe11 	bl	800014c <display7SEG>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <update7SEG+0x110>)
 8000532:	f001 fa16 	bl	8001962 <HAL_GPIO_WritePin>
		break ;
 8000536:	e01c      	b.n	8000572 <update7SEG+0x106>
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	480f      	ldr	r0, [pc, #60]	; (800057c <update7SEG+0x110>)
 800053e:	f001 fa10 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <update7SEG+0x110>)
 800054a:	f001 fa0a 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2140      	movs	r1, #64	; 0x40
 8000552:	480a      	ldr	r0, [pc, #40]	; (800057c <update7SEG+0x110>)
 8000554:	f001 fa05 	bl	8001962 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <update7SEG+0x114>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fdf5 	bl	800014c <display7SEG>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <update7SEG+0x110>)
 800056a:	f001 f9fa 	bl	8001962 <HAL_GPIO_WritePin>
		break ;
 800056e:	e000      	b.n	8000572 <update7SEG+0x106>
		default :
		break ;
 8000570:	bf00      	nop
	}
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40010800 	.word	0x40010800
 8000580:	20000080 	.word	0x20000080

08000584 <updateClockBuffer>:


void updateClockBuffer(int clock1, int clock2){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]

	if (clock1 < 10){
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b09      	cmp	r3, #9
 8000592:	dc06      	bgt.n	80005a2 <updateClockBuffer+0x1e>
		led_buffer[0] = 0;
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <updateClockBuffer+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
		led_buffer[1] = clock1;
 800059a:	4a20      	ldr	r2, [pc, #128]	; (800061c <updateClockBuffer+0x98>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6053      	str	r3, [r2, #4]
 80005a0:	e016      	b.n	80005d0 <updateClockBuffer+0x4c>
	}
	else {
		led_buffer[0] = clock1/10;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <updateClockBuffer+0x9c>)
 80005a6:	fb82 1203 	smull	r1, r2, r2, r3
 80005aa:	1092      	asrs	r2, r2, #2
 80005ac:	17db      	asrs	r3, r3, #31
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	4a1a      	ldr	r2, [pc, #104]	; (800061c <updateClockBuffer+0x98>)
 80005b2:	6013      	str	r3, [r2, #0]
		led_buffer[1] = clock1%10;
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <updateClockBuffer+0x9c>)
 80005b8:	fb83 2301 	smull	r2, r3, r3, r1
 80005bc:	109a      	asrs	r2, r3, #2
 80005be:	17cb      	asrs	r3, r1, #31
 80005c0:	1ad2      	subs	r2, r2, r3
 80005c2:	4613      	mov	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	1aca      	subs	r2, r1, r3
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <updateClockBuffer+0x98>)
 80005ce:	605a      	str	r2, [r3, #4]
	}

	if (clock2 < 10){
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	2b09      	cmp	r3, #9
 80005d4:	dc06      	bgt.n	80005e4 <updateClockBuffer+0x60>
		led_buffer[2] = 0;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <updateClockBuffer+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
		led_buffer[3] = clock2;
 80005dc:	4a0f      	ldr	r2, [pc, #60]	; (800061c <updateClockBuffer+0x98>)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	60d3      	str	r3, [r2, #12]
		led_buffer[3] = clock2%10;
	}



}
 80005e2:	e016      	b.n	8000612 <updateClockBuffer+0x8e>
		led_buffer[2] = clock2/10;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <updateClockBuffer+0x9c>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	1092      	asrs	r2, r2, #2
 80005ee:	17db      	asrs	r3, r3, #31
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <updateClockBuffer+0x98>)
 80005f4:	6093      	str	r3, [r2, #8]
		led_buffer[3] = clock2%10;
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <updateClockBuffer+0x9c>)
 80005fa:	fb83 2301 	smull	r2, r3, r3, r1
 80005fe:	109a      	asrs	r2, r3, #2
 8000600:	17cb      	asrs	r3, r1, #31
 8000602:	1ad2      	subs	r2, r2, r3
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	1aca      	subs	r2, r1, r3
 800060e:	4b03      	ldr	r3, [pc, #12]	; (800061c <updateClockBuffer+0x98>)
 8000610:	60da      	str	r2, [r3, #12]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	20000080 	.word	0x20000080
 8000620:	66666667 	.word	0x66666667

08000624 <setTimer1>:
int timer10_flag = 0;
///


//*******
void setTimer1(int duration){
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CLOCK_TIMER;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <setTimer1+0x2c>)
 8000630:	fb82 1203 	smull	r1, r2, r2, r3
 8000634:	1092      	asrs	r2, r2, #2
 8000636:	17db      	asrs	r3, r3, #31
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <setTimer1+0x30>)
 800063c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <setTimer1+0x34>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	66666667 	.word	0x66666667
 8000654:	20000090 	.word	0x20000090
 8000658:	200000b8 	.word	0x200000b8

0800065c <setTimer2>:

void setTimer2(int duration){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/CLOCK_TIMER;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <setTimer2+0x2c>)
 8000668:	fb82 1203 	smull	r1, r2, r2, r3
 800066c:	1092      	asrs	r2, r2, #2
 800066e:	17db      	asrs	r3, r3, #31
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	4a06      	ldr	r2, [pc, #24]	; (800068c <setTimer2+0x30>)
 8000674:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <setTimer2+0x34>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	66666667 	.word	0x66666667
 800068c:	20000094 	.word	0x20000094
 8000690:	200000bc 	.word	0x200000bc

08000694 <setTimer3>:

void setTimer3(int duration){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/CLOCK_TIMER;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <setTimer3+0x2c>)
 80006a0:	fb82 1203 	smull	r1, r2, r2, r3
 80006a4:	1092      	asrs	r2, r2, #2
 80006a6:	17db      	asrs	r3, r3, #31
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <setTimer3+0x30>)
 80006ac:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <setTimer3+0x34>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	66666667 	.word	0x66666667
 80006c4:	20000098 	.word	0x20000098
 80006c8:	200000c0 	.word	0x200000c0

080006cc <timerRun>:
}
//**********



void timerRun(){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	if (timer1_counter == 1 ){
 80006d0:	4b42      	ldr	r3, [pc, #264]	; (80007dc <timerRun+0x110>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d103      	bne.n	80006e0 <timerRun+0x14>
		//BEGIN-TODO
		timer1_flag = 1;
 80006d8:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <timerRun+0x114>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	e004      	b.n	80006ea <timerRun+0x1e>
		//END-TODO
	}
	else timer1_counter--;
 80006e0:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <timerRun+0x110>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	4a3d      	ldr	r2, [pc, #244]	; (80007dc <timerRun+0x110>)
 80006e8:	6013      	str	r3, [r2, #0]

	if (timer2_counter == 1 ) timer2_flag = 1;
 80006ea:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <timerRun+0x118>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d103      	bne.n	80006fa <timerRun+0x2e>
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <timerRun+0x11c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	e004      	b.n	8000704 <timerRun+0x38>
	else timer2_counter--;
 80006fa:	4b3a      	ldr	r3, [pc, #232]	; (80007e4 <timerRun+0x118>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a38      	ldr	r2, [pc, #224]	; (80007e4 <timerRun+0x118>)
 8000702:	6013      	str	r3, [r2, #0]

	if (timer3_counter == 1 ) timer3_flag = 1;
 8000704:	4b39      	ldr	r3, [pc, #228]	; (80007ec <timerRun+0x120>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d103      	bne.n	8000714 <timerRun+0x48>
 800070c:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <timerRun+0x124>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	e004      	b.n	800071e <timerRun+0x52>
	else timer3_counter--;
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <timerRun+0x120>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	4a34      	ldr	r2, [pc, #208]	; (80007ec <timerRun+0x120>)
 800071c:	6013      	str	r3, [r2, #0]

	if (timer4_counter == 1 ) timer4_flag = 1;
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <timerRun+0x128>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d103      	bne.n	800072e <timerRun+0x62>
 8000726:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <timerRun+0x12c>)
 8000728:	2201      	movs	r2, #1
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	e004      	b.n	8000738 <timerRun+0x6c>
	else timer4_counter--;
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <timerRun+0x128>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3b01      	subs	r3, #1
 8000734:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <timerRun+0x128>)
 8000736:	6013      	str	r3, [r2, #0]

	if (timer5_counter == 1 ) timer5_flag = 1;
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <timerRun+0x130>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d103      	bne.n	8000748 <timerRun+0x7c>
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <timerRun+0x134>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	e004      	b.n	8000752 <timerRun+0x86>
	else timer5_counter--;
 8000748:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <timerRun+0x130>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	4a2b      	ldr	r2, [pc, #172]	; (80007fc <timerRun+0x130>)
 8000750:	6013      	str	r3, [r2, #0]

	if (timer6_counter == 1 ) timer6_flag = 1;
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <timerRun+0x138>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d103      	bne.n	8000762 <timerRun+0x96>
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <timerRun+0x13c>)
 800075c:	2201      	movs	r2, #1
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	e004      	b.n	800076c <timerRun+0xa0>
	else timer6_counter--;
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <timerRun+0x138>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3b01      	subs	r3, #1
 8000768:	4a26      	ldr	r2, [pc, #152]	; (8000804 <timerRun+0x138>)
 800076a:	6013      	str	r3, [r2, #0]


	if (timer7_counter == 1 ) timer7_flag = 1;
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <timerRun+0x140>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d103      	bne.n	800077c <timerRun+0xb0>
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <timerRun+0x144>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	e004      	b.n	8000786 <timerRun+0xba>
	else timer7_counter--;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <timerRun+0x140>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3b01      	subs	r3, #1
 8000782:	4a22      	ldr	r2, [pc, #136]	; (800080c <timerRun+0x140>)
 8000784:	6013      	str	r3, [r2, #0]

	if (timer8_counter == 1 ) timer8_flag = 1;
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <timerRun+0x148>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d103      	bne.n	8000796 <timerRun+0xca>
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <timerRun+0x14c>)
 8000790:	2201      	movs	r2, #1
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	e004      	b.n	80007a0 <timerRun+0xd4>
	else timer8_counter--;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <timerRun+0x148>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3b01      	subs	r3, #1
 800079c:	4a1d      	ldr	r2, [pc, #116]	; (8000814 <timerRun+0x148>)
 800079e:	6013      	str	r3, [r2, #0]

	if (timer9_counter == 1 ) timer9_flag = 1;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <timerRun+0x150>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d103      	bne.n	80007b0 <timerRun+0xe4>
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <timerRun+0x154>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	e004      	b.n	80007ba <timerRun+0xee>
	else timer9_counter--;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <timerRun+0x150>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	4a19      	ldr	r2, [pc, #100]	; (800081c <timerRun+0x150>)
 80007b8:	6013      	str	r3, [r2, #0]

	if (timer10_counter == 1 ) timer10_flag = 1;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <timerRun+0x158>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d103      	bne.n	80007ca <timerRun+0xfe>
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <timerRun+0x15c>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	601a      	str	r2, [r3, #0]
	else timer10_counter--;


}
 80007c8:	e004      	b.n	80007d4 <timerRun+0x108>
	else timer10_counter--;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <timerRun+0x158>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <timerRun+0x158>)
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000090 	.word	0x20000090
 80007e0:	200000b8 	.word	0x200000b8
 80007e4:	20000094 	.word	0x20000094
 80007e8:	200000bc 	.word	0x200000bc
 80007ec:	20000098 	.word	0x20000098
 80007f0:	200000c0 	.word	0x200000c0
 80007f4:	2000009c 	.word	0x2000009c
 80007f8:	200000c4 	.word	0x200000c4
 80007fc:	200000a0 	.word	0x200000a0
 8000800:	200000c8 	.word	0x200000c8
 8000804:	200000a4 	.word	0x200000a4
 8000808:	200000cc 	.word	0x200000cc
 800080c:	200000a8 	.word	0x200000a8
 8000810:	200000d0 	.word	0x200000d0
 8000814:	200000ac 	.word	0x200000ac
 8000818:	200000d4 	.word	0x200000d4
 800081c:	200000b0 	.word	0x200000b0
 8000820:	200000d8 	.word	0x200000d8
 8000824:	200000b4 	.word	0x200000b4
 8000828:	200000dc 	.word	0x200000dc

0800082c <isButton1Pressed>:
//Thoi gian cua nhan de'
int TimerforKeyPRESS1 = 200;



int isButton1Pressed(){
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <isButton1Pressed+0x20>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d104      	bne.n	8000842 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <isButton1Pressed+0x20>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
		return 1;
 800083e:	2301      	movs	r3, #1
 8000840:	e000      	b.n	8000844 <isButton1Pressed+0x18>
	}
	else return 0;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	200000e0 	.word	0x200000e0

08000850 <getKeyInput1>:
//
void getKeyInput1(){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <getKeyInput1+0x98>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a24      	ldr	r2, [pc, #144]	; (80008ec <getKeyInput1+0x9c>)
 800085a:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <getKeyInput1+0xa0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <getKeyInput1+0x98>)
 8000862:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000864:	2102      	movs	r1, #2
 8000866:	4823      	ldr	r0, [pc, #140]	; (80008f4 <getKeyInput1+0xa4>)
 8000868:	f001 f864 	bl	8001934 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <getKeyInput1+0xa0>)
 8000872:	601a      	str	r2, [r3, #0]


	if (KeyReg0 == KeyReg1 && KeyReg1 == KeyReg2){
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <getKeyInput1+0x9c>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <getKeyInput1+0x98>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d131      	bne.n	80008e4 <getKeyInput1+0x94>
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <getKeyInput1+0x98>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <getKeyInput1+0xa0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	429a      	cmp	r2, r3
 800088a:	d12b      	bne.n	80008e4 <getKeyInput1+0x94>

		if (KeyReg2 != KeyReg3){					//Nhan doi trang thai
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <getKeyInput1+0xa0>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <getKeyInput1+0xa8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	d012      	beq.n	80008be <getKeyInput1+0x6e>
			KeyReg3 = KeyReg2;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <getKeyInput1+0xa0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <getKeyInput1+0xa8>)
 800089e:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == PRESSED_STATE){			//Neu dang nhan
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <getKeyInput1+0xa0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <getKeyInput1+0x60>
				button1_flag = 1;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <getKeyInput1+0xac>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	601a      	str	r2, [r3, #0]
		}


	}

}
 80008ae:	e019      	b.n	80008e4 <getKeyInput1+0x94>
				button1_flag = 0;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <getKeyInput1+0xac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS1 = 100;				//khi release thi RESET nhan de 1 giay
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <getKeyInput1+0xb0>)
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	e012      	b.n	80008e4 <getKeyInput1+0x94>
			if(KeyReg2 == PRESSED_STATE){			// Neu dang nhan de
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <getKeyInput1+0xa0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10e      	bne.n	80008e4 <getKeyInput1+0x94>
				TimerforKeyPRESS1--;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <getKeyInput1+0xb0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <getKeyInput1+0xb0>)
 80008ce:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS1 == 0){			// Nhan de thanh cong
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <getKeyInput1+0xb0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d105      	bne.n	80008e4 <getKeyInput1+0x94>
					TimerforKeyPRESS1 = 50;			// Moi 50ms nhan de thi RETURN button_flag 1 lan
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <getKeyInput1+0xb0>)
 80008da:	2232      	movs	r2, #50	; 0x32
 80008dc:	601a      	str	r2, [r3, #0]
					button1_flag = 1;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <getKeyInput1+0xac>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000004 	.word	0x20000004
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	40010800 	.word	0x40010800
 80008f8:	2000000c 	.word	0x2000000c
 80008fc:	200000e0 	.word	0x200000e0
 8000900:	20000010 	.word	0x20000010

08000904 <isButton2Pressed>:
//Thoi gian cua nhan de'
int TimerforKeyPRESS2 = 200;



int isButton2Pressed(){
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <isButton2Pressed+0x20>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d104      	bne.n	800091a <isButton2Pressed+0x16>
		button2_flag = 0;
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <isButton2Pressed+0x20>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
		return 1;
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <isButton2Pressed+0x18>
	}
	else return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	200000e4 	.word	0x200000e4

08000928 <getKeyInput2>:
//
void getKeyInput2(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	KeyReg02 = KeyReg12;
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <getKeyInput2+0x98>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a24      	ldr	r2, [pc, #144]	; (80009c4 <getKeyInput2+0x9c>)
 8000932:	6013      	str	r3, [r2, #0]
	KeyReg12 = KeyReg22;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <getKeyInput2+0xa0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a21      	ldr	r2, [pc, #132]	; (80009c0 <getKeyInput2+0x98>)
 800093a:	6013      	str	r3, [r2, #0]
	KeyReg22 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800093c:	2104      	movs	r1, #4
 800093e:	4823      	ldr	r0, [pc, #140]	; (80009cc <getKeyInput2+0xa4>)
 8000940:	f000 fff8 	bl	8001934 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <getKeyInput2+0xa0>)
 800094a:	601a      	str	r2, [r3, #0]


	if (KeyReg02 == KeyReg12 && KeyReg12 == KeyReg22){
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <getKeyInput2+0x9c>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <getKeyInput2+0x98>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d131      	bne.n	80009bc <getKeyInput2+0x94>
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <getKeyInput2+0x98>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <getKeyInput2+0xa0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	d12b      	bne.n	80009bc <getKeyInput2+0x94>

		if (KeyReg22 != KeyReg32){					//Nhan doi trang thai
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <getKeyInput2+0xa0>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <getKeyInput2+0xa8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d012      	beq.n	8000996 <getKeyInput2+0x6e>
			KeyReg32 = KeyReg22;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <getKeyInput2+0xa0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <getKeyInput2+0xa8>)
 8000976:	6013      	str	r3, [r2, #0]
			if (KeyReg22 == PRESSED_STATE){			//Neu dang nhan
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <getKeyInput2+0xa0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d103      	bne.n	8000988 <getKeyInput2+0x60>
				button2_flag = 1;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <getKeyInput2+0xac>)
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
		}


	}

}
 8000986:	e019      	b.n	80009bc <getKeyInput2+0x94>
				button2_flag = 0;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <getKeyInput2+0xac>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS2 = 100;				//khi release thi RESET nhan de 1 giay
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <getKeyInput2+0xb0>)
 8000990:	2264      	movs	r2, #100	; 0x64
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	e012      	b.n	80009bc <getKeyInput2+0x94>
			if(KeyReg22 == PRESSED_STATE){			// Neu dang nhan de
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <getKeyInput2+0xa0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10e      	bne.n	80009bc <getKeyInput2+0x94>
				TimerforKeyPRESS2--;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <getKeyInput2+0xb0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <getKeyInput2+0xb0>)
 80009a6:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS2 == 0){			// Nhan de thanh cong
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <getKeyInput2+0xb0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d105      	bne.n	80009bc <getKeyInput2+0x94>
					TimerforKeyPRESS2 = 50;			// Moi 50ms nhan de thi RETURN button_flag 1 lan
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <getKeyInput2+0xb0>)
 80009b2:	2232      	movs	r2, #50	; 0x32
 80009b4:	601a      	str	r2, [r3, #0]
					button2_flag = 1;
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <getKeyInput2+0xac>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000018 	.word	0x20000018
 80009c4:	20000014 	.word	0x20000014
 80009c8:	2000001c 	.word	0x2000001c
 80009cc:	40010800 	.word	0x40010800
 80009d0:	20000020 	.word	0x20000020
 80009d4:	200000e4 	.word	0x200000e4
 80009d8:	20000024 	.word	0x20000024

080009dc <isButton3Pressed>:
//Thoi gian cua nhan de'
int TimerforKeyPRESS3 = 200;



int isButton3Pressed(){
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <isButton3Pressed+0x20>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d104      	bne.n	80009f2 <isButton3Pressed+0x16>
		button3_flag = 0;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <isButton3Pressed+0x20>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
		return 1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <isButton3Pressed+0x18>
	}
	else return 0;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	200000e8 	.word	0x200000e8

08000a00 <getKeyInput3>:
//
void getKeyInput3(){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	KeyReg03 = KeyReg13;
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <getKeyInput3+0x98>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <getKeyInput3+0x9c>)
 8000a0a:	6013      	str	r3, [r2, #0]
	KeyReg13 = KeyReg23;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <getKeyInput3+0xa0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <getKeyInput3+0x98>)
 8000a12:	6013      	str	r3, [r2, #0]
	KeyReg23 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000a14:	2108      	movs	r1, #8
 8000a16:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <getKeyInput3+0xa4>)
 8000a18:	f000 ff8c 	bl	8001934 <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <getKeyInput3+0xa0>)
 8000a22:	601a      	str	r2, [r3, #0]


	if (KeyReg03 == KeyReg13 && KeyReg13 == KeyReg23){
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <getKeyInput3+0x9c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <getKeyInput3+0x98>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d131      	bne.n	8000a94 <getKeyInput3+0x94>
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <getKeyInput3+0x98>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <getKeyInput3+0xa0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d12b      	bne.n	8000a94 <getKeyInput3+0x94>

		if (KeyReg23 != KeyReg33){					//Nhan doi trang thai
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <getKeyInput3+0xa0>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <getKeyInput3+0xa8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d012      	beq.n	8000a6e <getKeyInput3+0x6e>
			KeyReg33 = KeyReg23;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <getKeyInput3+0xa0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <getKeyInput3+0xa8>)
 8000a4e:	6013      	str	r3, [r2, #0]
			if (KeyReg23 == PRESSED_STATE){			//Neu dang nhan
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <getKeyInput3+0xa0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d103      	bne.n	8000a60 <getKeyInput3+0x60>
				button3_flag = 1;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <getKeyInput3+0xac>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
		}


	}

}
 8000a5e:	e019      	b.n	8000a94 <getKeyInput3+0x94>
				button3_flag = 0;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <getKeyInput3+0xac>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS3 = 100;				//khi release thi RESET nhan de 1 giay
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <getKeyInput3+0xb0>)
 8000a68:	2264      	movs	r2, #100	; 0x64
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	e012      	b.n	8000a94 <getKeyInput3+0x94>
			if(KeyReg3 == PRESSED_STATE){			// Neu dang nhan de
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <getKeyInput3+0xb4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10e      	bne.n	8000a94 <getKeyInput3+0x94>
				TimerforKeyPRESS3--;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <getKeyInput3+0xb0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <getKeyInput3+0xb0>)
 8000a7e:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS3 == 0){			// Nhan de thanh cong
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <getKeyInput3+0xb0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d105      	bne.n	8000a94 <getKeyInput3+0x94>
					TimerforKeyPRESS3 = 50;			// Moi 50ms nhan de thi RETURN button_flag 1 lan
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <getKeyInput3+0xb0>)
 8000a8a:	2232      	movs	r2, #50	; 0x32
 8000a8c:	601a      	str	r2, [r3, #0]
					button3_flag = 1;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <getKeyInput3+0xac>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000002c 	.word	0x2000002c
 8000a9c:	20000028 	.word	0x20000028
 8000aa0:	20000030 	.word	0x20000030
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	20000034 	.word	0x20000034
 8000aac:	200000e8 	.word	0x200000e8
 8000ab0:	20000038 	.word	0x20000038
 8000ab4:	2000000c 	.word	0x2000000c

08000ab8 <fsm_manual_run>:
#include "7segment_led.h"

int temp_timer = 0;


void fsm_manual_run(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

	switch(status){
 8000abc:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <fsm_manual_run+0x1b8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	2b0d      	cmp	r3, #13
 8000ac4:	f200 80cf 	bhi.w	8000c66 <fsm_manual_run+0x1ae>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <fsm_manual_run+0x18>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000b09 	.word	0x08000b09
 8000ad4:	08000c67 	.word	0x08000c67
 8000ad8:	08000c67 	.word	0x08000c67
 8000adc:	08000c67 	.word	0x08000c67
 8000ae0:	08000c67 	.word	0x08000c67
 8000ae4:	08000c67 	.word	0x08000c67
 8000ae8:	08000c67 	.word	0x08000c67
 8000aec:	08000c67 	.word	0x08000c67
 8000af0:	08000c67 	.word	0x08000c67
 8000af4:	08000c67 	.word	0x08000c67
 8000af8:	08000c67 	.word	0x08000c67
 8000afc:	08000b4d 	.word	0x08000b4d
 8000b00:	08000c09 	.word	0x08000c09
 8000b04:	08000bab 	.word	0x08000bab

	case INIT:
		// dem nguoc
		updateClockBuffer(timer2_counter/100 +1, timer3_counter/100 +1);
 8000b08:	4b5a      	ldr	r3, [pc, #360]	; (8000c74 <fsm_manual_run+0x1bc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a5a      	ldr	r2, [pc, #360]	; (8000c78 <fsm_manual_run+0x1c0>)
 8000b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b12:	1152      	asrs	r2, r2, #5
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	1c58      	adds	r0, r3, #1
 8000b1a:	4b58      	ldr	r3, [pc, #352]	; (8000c7c <fsm_manual_run+0x1c4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a56      	ldr	r2, [pc, #344]	; (8000c78 <fsm_manual_run+0x1c0>)
 8000b20:	fb82 1203 	smull	r1, r2, r2, r3
 8000b24:	1152      	asrs	r2, r2, #5
 8000b26:	17db      	asrs	r3, r3, #31
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f7ff fd29 	bl	8000584 <updateClockBuffer>

		if (isButton1Pressed()){
 8000b32:	f7ff fe7b 	bl	800082c <isButton1Pressed>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f000 8096 	beq.w	8000c6a <fsm_manual_run+0x1b2>
			status = MAN_RED;
 8000b3e:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <fsm_manual_run+0x1b8>)
 8000b40:	220c      	movs	r2, #12
 8000b42:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000b44:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b4a:	e08e      	b.n	8000c6a <fsm_manual_run+0x1b2>


	case MAN_RED:

		if (isButton1Pressed()){
 8000b4c:	f7ff fe6e 	bl	800082c <isButton1Pressed>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <fsm_manual_run+0xaa>
			status = MAN_YELLOW;
 8000b56:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <fsm_manual_run+0x1b8>)
 8000b58:	220e      	movs	r2, #14
 8000b5a:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000b5c:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed()){
 8000b62:	f7ff fecf 	bl	8000904 <isButton2Pressed>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <fsm_manual_run+0xc0>
			temp_timer = temp_timer + 1000;
 8000b6c:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b74:	4a42      	ldr	r2, [pc, #264]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000b76:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed()){
 8000b78:	f7ff ff30 	bl	80009dc <isButton3Pressed>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <fsm_manual_run+0xd8>
			timer_red = temp_timer;
 8000b82:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a3f      	ldr	r2, [pc, #252]	; (8000c84 <fsm_manual_run+0x1cc>)
 8000b88:	6013      	str	r3, [r2, #0]
			status = INIT;
 8000b8a:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <fsm_manual_run+0x1b8>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
		}

		updateClockBuffer(82, temp_timer/1000 );
 8000b90:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a3c      	ldr	r2, [pc, #240]	; (8000c88 <fsm_manual_run+0x1d0>)
 8000b96:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9a:	1192      	asrs	r2, r2, #6
 8000b9c:	17db      	asrs	r3, r3, #31
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2052      	movs	r0, #82	; 0x52
 8000ba4:	f7ff fcee 	bl	8000584 <updateClockBuffer>

		break;
 8000ba8:	e060      	b.n	8000c6c <fsm_manual_run+0x1b4>




	case MAN_YELLOW:
		if (isButton1Pressed()){
 8000baa:	f7ff fe3f 	bl	800082c <isButton1Pressed>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d005      	beq.n	8000bc0 <fsm_manual_run+0x108>
			status = MAN_GREEN;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <fsm_manual_run+0x1b8>)
 8000bb6:	220d      	movs	r2, #13
 8000bb8:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed()){
 8000bc0:	f7ff fea0 	bl	8000904 <isButton2Pressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d005      	beq.n	8000bd6 <fsm_manual_run+0x11e>
			temp_timer = temp_timer + 1000;
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000bd4:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed()){
 8000bd6:	f7ff ff01 	bl	80009dc <isButton3Pressed>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d006      	beq.n	8000bee <fsm_manual_run+0x136>
			timer_yellow = temp_timer;
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <fsm_manual_run+0x1d4>)
 8000be6:	6013      	str	r3, [r2, #0]
			status = INIT;
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <fsm_manual_run+0x1b8>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
		}
		updateClockBuffer(83, temp_timer/1000);
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a25      	ldr	r2, [pc, #148]	; (8000c88 <fsm_manual_run+0x1d0>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1192      	asrs	r2, r2, #6
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2053      	movs	r0, #83	; 0x53
 8000c02:	f7ff fcbf 	bl	8000584 <updateClockBuffer>


		break;
 8000c06:	e031      	b.n	8000c6c <fsm_manual_run+0x1b4>


	case MAN_GREEN:

			if (isButton1Pressed()){
 8000c08:	f7ff fe10 	bl	800082c <isButton1Pressed>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d005      	beq.n	8000c1e <fsm_manual_run+0x166>
				status = INIT;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <fsm_manual_run+0x1b8>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
				temp_timer = 0;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
			}
			if (isButton2Pressed()){
 8000c1e:	f7ff fe71 	bl	8000904 <isButton2Pressed>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <fsm_manual_run+0x17c>
				temp_timer = temp_timer + 1000;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000c32:	6013      	str	r3, [r2, #0]
			}
			if (isButton3Pressed()){
 8000c34:	f7ff fed2 	bl	80009dc <isButton3Pressed>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <fsm_manual_run+0x194>
				timer_green = temp_timer;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <fsm_manual_run+0x1d8>)
 8000c44:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <fsm_manual_run+0x1b8>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
			}

			updateClockBuffer(84, temp_timer/1000);
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <fsm_manual_run+0x1c8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <fsm_manual_run+0x1d0>)
 8000c52:	fb82 1203 	smull	r1, r2, r2, r3
 8000c56:	1192      	asrs	r2, r2, #6
 8000c58:	17db      	asrs	r3, r3, #31
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2054      	movs	r0, #84	; 0x54
 8000c60:	f7ff fc90 	bl	8000584 <updateClockBuffer>

		break;
 8000c64:	e002      	b.n	8000c6c <fsm_manual_run+0x1b4>



	default:
		break;
 8000c66:	bf00      	nop
 8000c68:	e000      	b.n	8000c6c <fsm_manual_run+0x1b4>
		break;
 8000c6a:	bf00      	nop
	}

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000003c 	.word	0x2000003c
 8000c74:	20000094 	.word	0x20000094
 8000c78:	51eb851f 	.word	0x51eb851f
 8000c7c:	20000098 	.word	0x20000098
 8000c80:	200000ec 	.word	0x200000ec
 8000c84:	20000040 	.word	0x20000040
 8000c88:	10624dd3 	.word	0x10624dd3
 8000c8c:	20000048 	.word	0x20000048
 8000c90:	20000044 	.word	0x20000044

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f000 fb60 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f876 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f000 f8fc 	bl	8000e9c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ca4:	f000 f8ae 	bl	8000e04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ca8:	482e      	ldr	r0, [pc, #184]	; (8000d64 <main+0xd0>)
 8000caa:	f001 fac3 	bl	8002234 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int hour = 15 , minute = 59 , second = 50;
  //int led_index = 0;

  setTimer1(250);
 8000cae:	20fa      	movs	r0, #250	; 0xfa
 8000cb0:	f7ff fcb8 	bl	8000624 <setTimer1>

	  //fsm_automatic_run();
	  //fsm_manual_run();


	  light_control_1();
 8000cb4:	f000 fa04 	bl	80010c0 <light_control_1>
	  light_control_2();
 8000cb8:	f000 fa96 	bl	80011e8 <light_control_2>

	  fsm_manual_run();
 8000cbc:	f7ff fefc 	bl	8000ab8 <fsm_manual_run>


	  if (timer1_flag == 1){
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <main+0xd4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d1f5      	bne.n	8000cb4 <main+0x20>
		  setTimer1(250);
 8000cc8:	20fa      	movs	r0, #250	; 0xfa
 8000cca:	f7ff fcab 	bl	8000624 <setTimer1>

		  //Cum den 1
		  if (RED1_flag){
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <main+0xd8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d005      	beq.n	8000ce2 <main+0x4e>
			  HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cda:	4825      	ldr	r0, [pc, #148]	; (8000d70 <main+0xdc>)
 8000cdc:	f000 fe59 	bl	8001992 <HAL_GPIO_TogglePin>
 8000ce0:	e012      	b.n	8000d08 <main+0x74>
		  }
		  else if(YELLOW1_flag){
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <main+0xe0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d005      	beq.n	8000cf6 <main+0x62>
			  HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cee:	4820      	ldr	r0, [pc, #128]	; (8000d70 <main+0xdc>)
 8000cf0:	f000 fe4f 	bl	8001992 <HAL_GPIO_TogglePin>
 8000cf4:	e008      	b.n	8000d08 <main+0x74>
		  }
		  else if(GREEN1_flag){
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <main+0xe4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d004      	beq.n	8000d08 <main+0x74>
			  HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000cfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d02:	481b      	ldr	r0, [pc, #108]	; (8000d70 <main+0xdc>)
 8000d04:	f000 fe45 	bl	8001992 <HAL_GPIO_TogglePin>
		  }

		  //Cum den 2
		  if(RED2_flag){
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <main+0xe8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d005      	beq.n	8000d1c <main+0x88>
			  HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d14:	4816      	ldr	r0, [pc, #88]	; (8000d70 <main+0xdc>)
 8000d16:	f000 fe3c 	bl	8001992 <HAL_GPIO_TogglePin>
 8000d1a:	e012      	b.n	8000d42 <main+0xae>
		  }
		  else if(YELLOW2_flag){
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <main+0xec>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <main+0x9c>
			  HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <main+0xdc>)
 8000d2a:	f000 fe32 	bl	8001992 <HAL_GPIO_TogglePin>
 8000d2e:	e008      	b.n	8000d42 <main+0xae>
		  }
		  else if(GREEN2_flag){
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <main+0xf0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d004      	beq.n	8000d42 <main+0xae>
			  HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <main+0xdc>)
 8000d3e:	f000 fe28 	bl	8001992 <HAL_GPIO_TogglePin>
		  }

		  // Update 7seg LEDs
		  if (index_led > 3){
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <main+0xf4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	dd02      	ble.n	8000d50 <main+0xbc>
		  	  	index_led = 0;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <main+0xf4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
		  }
		  update7SEG(index_led++);
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <main+0xf4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	490c      	ldr	r1, [pc, #48]	; (8000d88 <main+0xf4>)
 8000d58:	600a      	str	r2, [r1, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fb86 	bl	800046c <update7SEG>
	  light_control_1();
 8000d60:	e7a8      	b.n	8000cb4 <main+0x20>
 8000d62:	bf00      	nop
 8000d64:	200000f0 	.word	0x200000f0
 8000d68:	200000b8 	.word	0x200000b8
 8000d6c:	20000138 	.word	0x20000138
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	20000140 	.word	0x20000140
 8000d78:	20000148 	.word	0x20000148
 8000d7c:	2000013c 	.word	0x2000013c
 8000d80:	20000144 	.word	0x20000144
 8000d84:	2000014c 	.word	0x2000014c
 8000d88:	2000007c 	.word	0x2000007c

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b090      	sub	sp, #64	; 0x40
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	2228      	movs	r2, #40	; 0x28
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fe02 	bl	80029a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db6:	2310      	movs	r3, #16
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fdfe 	bl	80019c4 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dce:	f000 f8f3 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 f86c 	bl	8001ec8 <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000df6:	f000 f8df 	bl	8000fb8 <Error_Handler>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3740      	adds	r7, #64	; 0x40
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <MX_TIM2_Init+0x94>)
 8000e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_TIM2_Init+0x94>)
 8000e2a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_TIM2_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_TIM2_Init+0x94>)
 8000e38:	2209      	movs	r2, #9
 8000e3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_TIM2_Init+0x94>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_TIM2_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <MX_TIM2_Init+0x94>)
 8000e4a:	f001 f9a3 	bl	8002194 <HAL_TIM_Base_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e54:	f000 f8b0 	bl	8000fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_TIM2_Init+0x94>)
 8000e66:	f001 fb39 	bl	80024dc <HAL_TIM_ConfigClockSource>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e70:	f000 f8a2 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_TIM2_Init+0x94>)
 8000e82:	f001 fd01 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e8c:	f000 f894 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200000f0 	.word	0x200000f0

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_GPIO_Init+0xec>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOT_Pin|LED1_Pin|EN0_Pin|EN1_Pin
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8000efe:	4823      	ldr	r0, [pc, #140]	; (8000f8c <MX_GPIO_Init+0xf0>)
 8000f00:	f000 fd2f 	bl	8001962 <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|ENM2_Pin|ENM3_Pin
                          |ENM4_Pin|ENM5_Pin|ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|LED_RED1_Pin
 8000f04:	2200      	movs	r2, #0
 8000f06:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000f0a:	4821      	ldr	r0, [pc, #132]	; (8000f90 <MX_GPIO_Init+0xf4>)
 8000f0c:	f000 fd29 	bl	8001962 <HAL_GPIO_WritePin>
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin|LED_YELLOW2_Pin
                          |LED_GREEN2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	4619      	mov	r1, r3
 8000f24:	481b      	ldr	r0, [pc, #108]	; (8000f94 <MX_GPIO_Init+0xf8>)
 8000f26:	f000 fb89 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000f2a:	230e      	movs	r3, #14
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4813      	ldr	r0, [pc, #76]	; (8000f8c <MX_GPIO_Init+0xf0>)
 8000f3e:	f000 fb7d 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOT_Pin LED1_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin ENM2_Pin ENM3_Pin
                           ENM4_Pin ENM5_Pin ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = DOT_Pin|LED1_Pin|EN0_Pin|EN1_Pin
 8000f42:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000f46:	613b      	str	r3, [r7, #16]
                          |EN2_Pin|EN3_Pin|ENM2_Pin|ENM3_Pin
                          |ENM4_Pin|ENM5_Pin|ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_GPIO_Init+0xf0>)
 8000f5c:	f000 fb6e 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin LED_RED1_Pin
                           LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin LED_YELLOW2_Pin
                           LED_GREEN2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|LED_RED1_Pin
 8000f60:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000f64:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin|LED_YELLOW2_Pin
                          |LED_GREEN2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_GPIO_Init+0xf4>)
 8000f7a:	f000 fb5f 	bl	800163c <HAL_GPIO_Init>

}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40010c00 	.word	0x40010c00
 8000f94:	40011000 	.word	0x40011000

08000f98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000fa0:	f7ff fb94 	bl	80006cc <timerRun>
	getKeyInput1();
 8000fa4:	f7ff fc54 	bl	8000850 <getKeyInput1>
	getKeyInput2();
 8000fa8:	f7ff fcbe 	bl	8000928 <getKeyInput2>
	getKeyInput3();
 8000fac:	f7ff fd28 	bl	8000a00 <getKeyInput3>

}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_MspInit+0x40>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_MspInit+0x40>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_MspInit+0x40>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_MspInit+0x40>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_MspInit+0x40>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_MspInit+0x40>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d113      	bne.n	8001042 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	201c      	movs	r0, #28
 8001038:	f000 fac9 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103c:	201c      	movs	r0, #28
 800103e:	f000 fae2 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001096:	f000 f9a7 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM2_IRQHandler+0x10>)
 80010a6:	f001 f911 	bl	80022cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000f0 	.word	0x200000f0

080010b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <light_control_1>:

int status_light1 = INIT1;
int status_light2 = INIT2;


void light_control_1(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

	switch(status_light1){
 80010c4:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <light_control_1+0x104>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3b13      	subs	r3, #19
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d870      	bhi.n	80011b0 <light_control_1+0xf0>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <light_control_1+0x14>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	0800111b 	.word	0x0800111b
 80010dc:	0800114d 	.word	0x0800114d
 80010e0:	0800117f 	.word	0x0800117f

		case INIT1:
			setTimer2(timer_red);
 80010e4:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <light_control_1+0x108>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fab7 	bl	800065c <setTimer2>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f4:	4835      	ldr	r0, [pc, #212]	; (80011cc <light_control_1+0x10c>)
 80010f6:	f000 fc34 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001100:	4832      	ldr	r0, [pc, #200]	; (80011cc <light_control_1+0x10c>)
 8001102:	f000 fc2e 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110c:	482f      	ldr	r0, [pc, #188]	; (80011cc <light_control_1+0x10c>)
 800110e:	f000 fc28 	bl	8001962 <HAL_GPIO_WritePin>

			status_light1 = AUTO_RED1;
 8001112:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <light_control_1+0x104>)
 8001114:	2214      	movs	r2, #20
 8001116:	601a      	str	r2, [r3, #0]

			break;
 8001118:	e051      	b.n	80011be <light_control_1+0xfe>

		case AUTO_RED1:

			RED1_flag = 1;
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <light_control_1+0x110>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <light_control_1+0x114>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d145      	bne.n	80011b4 <light_control_1+0xf4>
				setTimer2(timer_green);
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <light_control_1+0x118>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa95 	bl	800065c <setTimer2>
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001138:	4824      	ldr	r0, [pc, #144]	; (80011cc <light_control_1+0x10c>)
 800113a:	f000 fc12 	bl	8001962 <HAL_GPIO_WritePin>
				RED1_flag = 0;
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <light_control_1+0x110>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_GREEN1;
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <light_control_1+0x104>)
 8001146:	2216      	movs	r2, #22
 8001148:	601a      	str	r2, [r3, #0]
			}


			break;
 800114a:	e033      	b.n	80011b4 <light_control_1+0xf4>


		case AUTO_YELLOW1:

			YELLOW1_flag = 1;
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <light_control_1+0x11c>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <light_control_1+0x114>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d12e      	bne.n	80011b8 <light_control_1+0xf8>
				setTimer2(timer_red);
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <light_control_1+0x108>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fa7c 	bl	800065c <setTimer2>
				YELLOW1_flag = 0;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <light_control_1+0x11c>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001170:	4816      	ldr	r0, [pc, #88]	; (80011cc <light_control_1+0x10c>)
 8001172:	f000 fbf6 	bl	8001962 <HAL_GPIO_WritePin>
				status_light1 = AUTO_RED1;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <light_control_1+0x104>)
 8001178:	2214      	movs	r2, #20
 800117a:	601a      	str	r2, [r3, #0]
			}



			break;
 800117c:	e01c      	b.n	80011b8 <light_control_1+0xf8>


		case AUTO_GREEN1:
			GREEN1_flag = 1;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <light_control_1+0x120>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <light_control_1+0x114>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d117      	bne.n	80011bc <light_control_1+0xfc>
				setTimer2(timer_yellow);
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <light_control_1+0x124>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fa63 	bl	800065c <setTimer2>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <light_control_1+0x10c>)
 800119e:	f000 fbe0 	bl	8001962 <HAL_GPIO_WritePin>
				GREEN1_flag = 0;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <light_control_1+0x120>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_YELLOW1;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <light_control_1+0x104>)
 80011aa:	2215      	movs	r2, #21
 80011ac:	601a      	str	r2, [r3, #0]
			}

			break;
 80011ae:	e005      	b.n	80011bc <light_control_1+0xfc>



		default:
			break;
 80011b0:	bf00      	nop
 80011b2:	e004      	b.n	80011be <light_control_1+0xfe>
			break;
 80011b4:	bf00      	nop
 80011b6:	e002      	b.n	80011be <light_control_1+0xfe>
			break;
 80011b8:	bf00      	nop
 80011ba:	e000      	b.n	80011be <light_control_1+0xfe>
			break;
 80011bc:	bf00      	nop
		}

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000050 	.word	0x20000050
 80011c8:	20000040 	.word	0x20000040
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	20000138 	.word	0x20000138
 80011d4:	200000bc 	.word	0x200000bc
 80011d8:	20000044 	.word	0x20000044
 80011dc:	20000140 	.word	0x20000140
 80011e0:	20000148 	.word	0x20000148
 80011e4:	20000048 	.word	0x20000048

080011e8 <light_control_2>:




void light_control_2(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

	switch(status_light2){
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <light_control_2+0x104>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3b17      	subs	r3, #23
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d870      	bhi.n	80012d8 <light_control_2+0xf0>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <light_control_2+0x14>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	08001243 	.word	0x08001243
 8001204:	08001275 	.word	0x08001275
 8001208:	080012a7 	.word	0x080012a7

		case INIT2:
			setTimer3(timer_green);
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <light_control_2+0x108>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fa3f 	bl	8000694 <setTimer3>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	4835      	ldr	r0, [pc, #212]	; (80012f4 <light_control_2+0x10c>)
 800121e:	f000 fba0 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001228:	4832      	ldr	r0, [pc, #200]	; (80012f4 <light_control_2+0x10c>)
 800122a:	f000 fb9a 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001234:	482f      	ldr	r0, [pc, #188]	; (80012f4 <light_control_2+0x10c>)
 8001236:	f000 fb94 	bl	8001962 <HAL_GPIO_WritePin>

			status_light2 = AUTO_GREEN2;
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <light_control_2+0x104>)
 800123c:	221a      	movs	r2, #26
 800123e:	601a      	str	r2, [r3, #0]

			break;
 8001240:	e051      	b.n	80012e6 <light_control_2+0xfe>

		case AUTO_RED2:

			RED2_flag = 1;
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <light_control_2+0x110>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]

			if(timer3_flag == 1){
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <light_control_2+0x114>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d145      	bne.n	80012dc <light_control_2+0xf4>
				setTimer3(timer_green);
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <light_control_2+0x108>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fa1d 	bl	8000694 <setTimer3>
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001260:	4824      	ldr	r0, [pc, #144]	; (80012f4 <light_control_2+0x10c>)
 8001262:	f000 fb7e 	bl	8001962 <HAL_GPIO_WritePin>
				RED2_flag = 0;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <light_control_2+0x110>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_GREEN2;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <light_control_2+0x104>)
 800126e:	221a      	movs	r2, #26
 8001270:	601a      	str	r2, [r3, #0]
			}


			break;
 8001272:	e033      	b.n	80012dc <light_control_2+0xf4>


		case AUTO_YELLOW2:

			YELLOW2_flag = 1;
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <light_control_2+0x118>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]

			if(timer3_flag == 1){
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <light_control_2+0x114>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d12e      	bne.n	80012e0 <light_control_2+0xf8>
				setTimer3(timer_red);
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <light_control_2+0x11c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fa04 	bl	8000694 <setTimer3>
				YELLOW2_flag = 0;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <light_control_2+0x118>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001298:	4816      	ldr	r0, [pc, #88]	; (80012f4 <light_control_2+0x10c>)
 800129a:	f000 fb62 	bl	8001962 <HAL_GPIO_WritePin>
				status_light2 = AUTO_RED2;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <light_control_2+0x104>)
 80012a0:	2218      	movs	r2, #24
 80012a2:	601a      	str	r2, [r3, #0]
			}



			break;
 80012a4:	e01c      	b.n	80012e0 <light_control_2+0xf8>


		case AUTO_GREEN2:
			GREEN2_flag = 1;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <light_control_2+0x120>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

			if(timer3_flag == 1){
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <light_control_2+0x114>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d117      	bne.n	80012e4 <light_control_2+0xfc>
				setTimer3(timer_yellow);
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <light_control_2+0x124>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f9eb 	bl	8000694 <setTimer3>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <light_control_2+0x10c>)
 80012c6:	f000 fb4c 	bl	8001962 <HAL_GPIO_WritePin>
				GREEN2_flag = 0;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <light_control_2+0x120>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_YELLOW2;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <light_control_2+0x104>)
 80012d2:	2219      	movs	r2, #25
 80012d4:	601a      	str	r2, [r3, #0]
			}

			break;
 80012d6:	e005      	b.n	80012e4 <light_control_2+0xfc>



		default:
			break;
 80012d8:	bf00      	nop
 80012da:	e004      	b.n	80012e6 <light_control_2+0xfe>
			break;
 80012dc:	bf00      	nop
 80012de:	e002      	b.n	80012e6 <light_control_2+0xfe>
			break;
 80012e0:	bf00      	nop
 80012e2:	e000      	b.n	80012e6 <light_control_2+0xfe>
			break;
 80012e4:	bf00      	nop
		}

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000054 	.word	0x20000054
 80012f0:	20000044 	.word	0x20000044
 80012f4:	40010c00 	.word	0x40010c00
 80012f8:	2000013c 	.word	0x2000013c
 80012fc:	200000c0 	.word	0x200000c0
 8001300:	20000144 	.word	0x20000144
 8001304:	20000040 	.word	0x20000040
 8001308:	2000014c 	.word	0x2000014c
 800130c:	20000048 	.word	0x20000048

08001310 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001336:	f7ff febd 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f001 fb0f 	bl	800295c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800133e:	f7ff fca9 	bl	8000c94 <main>
  bx lr
 8001342:	4770      	bx	lr
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800134c:	080029f4 	.word	0x080029f4
  ldr r2, =_sbss
 8001350:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001354:	20000154 	.word	0x20000154

08001358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_2_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x28>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x28>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 f923 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	200f      	movs	r0, #15
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fe24 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f93b 	bl	8001622 <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 f903 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000004c 	.word	0x2000004c
 80013e0:	2000005c 	.word	0x2000005c
 80013e4:	20000058 	.word	0x20000058

080013e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_IncTick+0x1c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_IncTick+0x20>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a03      	ldr	r2, [pc, #12]	; (8001408 <HAL_IncTick+0x20>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	2000005c 	.word	0x2000005c
 8001408:	20000150 	.word	0x20000150

0800140c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <HAL_GetTick+0x10>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	20000150 	.word	0x20000150

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4906      	ldr	r1, [pc, #24]	; (80014b8 <__NVIC_EnableIRQ+0x34>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff90 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff2d 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff42 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff90 	bl	8001510 <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5f 	bl	80014bc <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff35 	bl	8001484 <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa2 	bl	8001574 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164e:	e161      	b.n	8001914 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001650:	2201      	movs	r2, #1
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8150 	bne.w	800190e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4a97      	ldr	r2, [pc, #604]	; (80018d0 <HAL_GPIO_Init+0x294>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d05e      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001678:	4a95      	ldr	r2, [pc, #596]	; (80018d0 <HAL_GPIO_Init+0x294>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d875      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 800167e:	4a95      	ldr	r2, [pc, #596]	; (80018d4 <HAL_GPIO_Init+0x298>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d058      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001684:	4a93      	ldr	r2, [pc, #588]	; (80018d4 <HAL_GPIO_Init+0x298>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d86f      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 800168a:	4a93      	ldr	r2, [pc, #588]	; (80018d8 <HAL_GPIO_Init+0x29c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d052      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001690:	4a91      	ldr	r2, [pc, #580]	; (80018d8 <HAL_GPIO_Init+0x29c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d869      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 8001696:	4a91      	ldr	r2, [pc, #580]	; (80018dc <HAL_GPIO_Init+0x2a0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d04c      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 800169c:	4a8f      	ldr	r2, [pc, #572]	; (80018dc <HAL_GPIO_Init+0x2a0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d863      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016a2:	4a8f      	ldr	r2, [pc, #572]	; (80018e0 <HAL_GPIO_Init+0x2a4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d046      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 80016a8:	4a8d      	ldr	r2, [pc, #564]	; (80018e0 <HAL_GPIO_Init+0x2a4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d85d      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016ae:	2b12      	cmp	r3, #18
 80016b0:	d82a      	bhi.n	8001708 <HAL_GPIO_Init+0xcc>
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d859      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <HAL_GPIO_Init+0x80>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	08001737 	.word	0x08001737
 80016c0:	08001711 	.word	0x08001711
 80016c4:	08001723 	.word	0x08001723
 80016c8:	08001765 	.word	0x08001765
 80016cc:	0800176b 	.word	0x0800176b
 80016d0:	0800176b 	.word	0x0800176b
 80016d4:	0800176b 	.word	0x0800176b
 80016d8:	0800176b 	.word	0x0800176b
 80016dc:	0800176b 	.word	0x0800176b
 80016e0:	0800176b 	.word	0x0800176b
 80016e4:	0800176b 	.word	0x0800176b
 80016e8:	0800176b 	.word	0x0800176b
 80016ec:	0800176b 	.word	0x0800176b
 80016f0:	0800176b 	.word	0x0800176b
 80016f4:	0800176b 	.word	0x0800176b
 80016f8:	0800176b 	.word	0x0800176b
 80016fc:	0800176b 	.word	0x0800176b
 8001700:	08001719 	.word	0x08001719
 8001704:	0800172d 	.word	0x0800172d
 8001708:	4a76      	ldr	r2, [pc, #472]	; (80018e4 <HAL_GPIO_Init+0x2a8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800170e:	e02c      	b.n	800176a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e029      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	3304      	adds	r3, #4
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e024      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	3308      	adds	r3, #8
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e01f      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	330c      	adds	r3, #12
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e01a      	b.n	800176c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800173e:	2304      	movs	r3, #4
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e013      	b.n	800176c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	611a      	str	r2, [r3, #16]
          break;
 8001756:	e009      	b.n	800176c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001758:	2308      	movs	r3, #8
 800175a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	615a      	str	r2, [r3, #20]
          break;
 8001762:	e003      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x130>
          break;
 800176a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d801      	bhi.n	8001776 <HAL_GPIO_Init+0x13a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	e001      	b.n	800177a <HAL_GPIO_Init+0x13e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3304      	adds	r3, #4
 800177a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2bff      	cmp	r3, #255	; 0xff
 8001780:	d802      	bhi.n	8001788 <HAL_GPIO_Init+0x14c>
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	e002      	b.n	800178e <HAL_GPIO_Init+0x152>
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	3b08      	subs	r3, #8
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	210f      	movs	r1, #15
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	6a39      	ldr	r1, [r7, #32]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80a9 	beq.w	800190e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d4:	4a45      	ldr	r2, [pc, #276]	; (80018ec <HAL_GPIO_Init+0x2b0>)
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3d      	ldr	r2, [pc, #244]	; (80018f0 <HAL_GPIO_Init+0x2b4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00d      	beq.n	800181c <HAL_GPIO_Init+0x1e0>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <HAL_GPIO_Init+0x2b8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d007      	beq.n	8001818 <HAL_GPIO_Init+0x1dc>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a3b      	ldr	r2, [pc, #236]	; (80018f8 <HAL_GPIO_Init+0x2bc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_GPIO_Init+0x1d8>
 8001810:	2302      	movs	r3, #2
 8001812:	e004      	b.n	800181e <HAL_GPIO_Init+0x1e2>
 8001814:	2303      	movs	r3, #3
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x1e2>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_GPIO_Init+0x1e2>
 800181c:	2300      	movs	r3, #0
 800181e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001820:	f002 0203 	and.w	r2, r2, #3
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	4093      	lsls	r3, r2
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182e:	492f      	ldr	r1, [pc, #188]	; (80018ec <HAL_GPIO_Init+0x2b0>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	492b      	ldr	r1, [pc, #172]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	4927      	ldr	r1, [pc, #156]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001860:	4013      	ands	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4921      	ldr	r1, [pc, #132]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	491d      	ldr	r1, [pc, #116]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001888:	4013      	ands	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	4917      	ldr	r1, [pc, #92]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4913      	ldr	r1, [pc, #76]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01f      	beq.n	8001900 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	490d      	ldr	r1, [pc, #52]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
 80018cc:	e01f      	b.n	800190e <HAL_GPIO_Init+0x2d2>
 80018ce:	bf00      	nop
 80018d0:	10320000 	.word	0x10320000
 80018d4:	10310000 	.word	0x10310000
 80018d8:	10220000 	.word	0x10220000
 80018dc:	10210000 	.word	0x10210000
 80018e0:	10120000 	.word	0x10120000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40010800 	.word	0x40010800
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_GPIO_Init+0x2f4>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <HAL_GPIO_Init+0x2f4>)
 800190a:	4013      	ands	r3, r2
 800190c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f ae96 	bne.w	8001650 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	372c      	adds	r7, #44	; 0x2c
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e001      	b.n	8001956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]
 800196e:	4613      	mov	r3, r2
 8001970:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001972:	787b      	ldrb	r3, [r7, #1]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001978:	887a      	ldrh	r2, [r7, #2]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800197e:	e003      	b.n	8001988 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	041a      	lsls	r2, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	611a      	str	r2, [r3, #16]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	041a      	lsls	r2, r3, #16
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	400b      	ands	r3, r1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	611a      	str	r2, [r3, #16]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e272      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8087 	beq.w	8001af2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e4:	4b92      	ldr	r3, [pc, #584]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d00c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f0:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d112      	bne.n	8001a22 <HAL_RCC_OscConfig+0x5e>
 80019fc:	4b8c      	ldr	r3, [pc, #560]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d10b      	bne.n	8001a22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	4b89      	ldr	r3, [pc, #548]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d06c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x12c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d168      	bne.n	8001af0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e24c      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x76>
 8001a2c:	4b80      	ldr	r3, [pc, #512]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a7f      	ldr	r2, [pc, #508]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e02e      	b.n	8001a98 <HAL_RCC_OscConfig+0xd4>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x98>
 8001a42:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7a      	ldr	r2, [pc, #488]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b78      	ldr	r3, [pc, #480]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a77      	ldr	r2, [pc, #476]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0xd4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0xbc>
 8001a66:	4b72      	ldr	r3, [pc, #456]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a71      	ldr	r2, [pc, #452]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xd4>
 8001a80:	4b6b      	ldr	r3, [pc, #428]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b68      	ldr	r3, [pc, #416]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a67      	ldr	r2, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fcb4 	bl	800140c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fcb0 	bl	800140c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e200      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe4>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fca0 	bl	800140c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fc9c 	bl	800140c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1ec      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x10c>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d063      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afe:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b0a:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d11c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x18c>
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x176>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e1c0      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4939      	ldr	r1, [pc, #228]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e03a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d020      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fc55 	bl	800140c <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff fc51 	bl	800140c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1a1      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4927      	ldr	r1, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fc34 	bl	800140c <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fc30 	bl	800140c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e180      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d03a      	beq.n	8001c48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d019      	beq.n	8001c0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7ff fc14 	bl	800140c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fc10 	bl	800140c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e160      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f000 faa6 	bl	8002158 <RCC_Delay>
 8001c0c:	e01c      	b.n	8001c48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_RCC_OscConfig+0x274>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c14:	f7ff fbfa 	bl	800140c <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1a:	e00f      	b.n	8001c3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fbf6 	bl	800140c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d908      	bls.n	8001c3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e146      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	42420000 	.word	0x42420000
 8001c38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e9      	bne.n	8001c1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a6 	beq.w	8001da2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10d      	bne.n	8001c82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a87      	ldr	r2, [pc, #540]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	61d3      	str	r3, [r2, #28]
 8001c72:	4b85      	ldr	r3, [pc, #532]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <HAL_RCC_OscConfig+0x4c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d118      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x4c8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7e      	ldr	r2, [pc, #504]	; (8001e8c <HAL_RCC_OscConfig+0x4c8>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fbb7 	bl	800140c <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca2:	f7ff fbb3 	bl	800140c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e103      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <HAL_RCC_OscConfig+0x4c8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x312>
 8001cc8:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	e02d      	b.n	8001d32 <HAL_RCC_OscConfig+0x36e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x334>
 8001cde:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a69      	ldr	r2, [pc, #420]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a66      	ldr	r2, [pc, #408]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	e01c      	b.n	8001d32 <HAL_RCC_OscConfig+0x36e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x356>
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a60      	ldr	r2, [pc, #384]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6213      	str	r3, [r2, #32]
 8001d0c:	4b5e      	ldr	r3, [pc, #376]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	e00b      	b.n	8001d32 <HAL_RCC_OscConfig+0x36e>
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a57      	ldr	r2, [pc, #348]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d015      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fb67 	bl	800140c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff fb63 	bl	800140c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0b1      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ee      	beq.n	8001d42 <HAL_RCC_OscConfig+0x37e>
 8001d64:	e014      	b.n	8001d90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7ff fb51 	bl	800140c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7ff fb4d 	bl	800140c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e09b      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d84:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ee      	bne.n	8001d6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d105      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8087 	beq.w	8001eba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d061      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d146      	bne.n	8001e4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc0:	4b33      	ldr	r3, [pc, #204]	; (8001e90 <HAL_RCC_OscConfig+0x4cc>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fb21 	bl	800140c <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7ff fb1d 	bl	800140c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e06d      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d108      	bne.n	8001e08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	4921      	ldr	r1, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a19      	ldr	r1, [r3, #32]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	491b      	ldr	r1, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_RCC_OscConfig+0x4cc>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff faf1 	bl	800140c <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff faed 	bl	800140c <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e03d      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x46a>
 8001e4c:	e035      	b.n	8001eba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_RCC_OscConfig+0x4cc>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fada 	bl	800140c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff fad6 	bl	800140c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e026      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x498>
 8001e7a:	e01e      	b.n	8001eba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e019      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x500>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0d0      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d910      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 0207 	bic.w	r2, r3, #7
 8001ef2:	4965      	ldr	r1, [pc, #404]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0b8      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	494d      	ldr	r1, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d040      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d115      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e07f      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e073      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06b      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4936      	ldr	r1, [pc, #216]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7ff fa28 	bl	800140c <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7ff fa24 	bl	800140c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e053      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d210      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4922      	ldr	r1, [pc, #136]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e032      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4916      	ldr	r1, [pc, #88]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002056:	f000 f821 	bl	800209c <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1cc>)
 8002070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1d0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f986 	bl	8001388 <HAL_InitTick>

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40022000 	.word	0x40022000
 800208c:	40021000 	.word	0x40021000
 8002090:	080029dc 	.word	0x080029dc
 8002094:	2000004c 	.word	0x2000004c
 8002098:	20000058 	.word	0x20000058

0800209c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	b490      	push	{r4, r7}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_RCC_GetSysClockFreq+0xac>)
 80020a4:	1d3c      	adds	r4, r7, #4
 80020a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020ac:	f240 2301 	movw	r3, #513	; 0x201
 80020b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d002      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x40>
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x46>
 80020da:	e02b      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020de:	623b      	str	r3, [r7, #32]
      break;
 80020e0:	e02b      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	0c9b      	lsrs	r3, r3, #18
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3328      	adds	r3, #40	; 0x28
 80020ec:	443b      	add	r3, r7
 80020ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0c5b      	lsrs	r3, r3, #17
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	3328      	adds	r3, #40	; 0x28
 800210a:	443b      	add	r3, r7
 800210c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002110:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002116:	fb03 f202 	mul.w	r2, r3, r2
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	e004      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	623b      	str	r3, [r7, #32]
      break;
 8002132:	e002      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002136:	623b      	str	r3, [r7, #32]
      break;
 8002138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213a:	6a3b      	ldr	r3, [r7, #32]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bc90      	pop	{r4, r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	080029cc 	.word	0x080029cc
 800214c:	40021000 	.word	0x40021000
 8002150:	007a1200 	.word	0x007a1200
 8002154:	003d0900 	.word	0x003d0900

08002158 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <RCC_Delay+0x34>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <RCC_Delay+0x38>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0a5b      	lsrs	r3, r3, #9
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002174:	bf00      	nop
  }
  while (Delay --);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f9      	bne.n	8002174 <RCC_Delay+0x1c>
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	2000004c 	.word	0x2000004c
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e041      	b.n	800222a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe ff24 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f000 fa6a 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e035      	b.n	80022b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <HAL_TIM_Base_Start_IT+0x90>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d009      	beq.n	8002282 <HAL_TIM_Base_Start_IT+0x4e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002276:	d004      	beq.n	8002282 <HAL_TIM_Base_Start_IT+0x4e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <HAL_TIM_Base_Start_IT+0x94>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d111      	bne.n	80022a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d010      	beq.n	80022b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a4:	e007      	b.n	80022b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40000400 	.word	0x40000400

080022cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d122      	bne.n	8002328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d11b      	bne.n	8002328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0202 	mvn.w	r2, #2
 80022f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f9b1 	bl	8002676 <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f9a4 	bl	8002664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f9b3 	bl	8002688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b04      	cmp	r3, #4
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b04      	cmp	r3, #4
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0204 	mvn.w	r2, #4
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f987 	bl	8002676 <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f97a 	bl	8002664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f989 	bl	8002688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b08      	cmp	r3, #8
 8002388:	d122      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b08      	cmp	r3, #8
 8002396:	d11b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0208 	mvn.w	r2, #8
 80023a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2204      	movs	r2, #4
 80023a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f95d 	bl	8002676 <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f950 	bl	8002664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f95f 	bl	8002688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d122      	bne.n	8002424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d11b      	bne.n	8002424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0210 	mvn.w	r2, #16
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2208      	movs	r2, #8
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f933 	bl	8002676 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f926 	bl	8002664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f935 	bl	8002688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0201 	mvn.w	r2, #1
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe fda4 	bl	8000f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245a:	2b80      	cmp	r3, #128	; 0x80
 800245c:	d10e      	bne.n	800247c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	2b80      	cmp	r3, #128	; 0x80
 800246a:	d107      	bne.n	800247c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa67 	bl	800294a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d107      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8f9 	bl	800269a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d10e      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d107      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0220 	mvn.w	r2, #32
 80024cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fa32 	bl	8002938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_TIM_ConfigClockSource+0x18>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0b3      	b.n	800265c <HAL_TIM_ConfigClockSource+0x180>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252c:	d03e      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0xd0>
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002532:	f200 8087 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x168>
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253a:	f000 8085 	beq.w	8002648 <HAL_TIM_ConfigClockSource+0x16c>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	d87f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x168>
 8002544:	2b70      	cmp	r3, #112	; 0x70
 8002546:	d01a      	beq.n	800257e <HAL_TIM_ConfigClockSource+0xa2>
 8002548:	2b70      	cmp	r3, #112	; 0x70
 800254a:	d87b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x168>
 800254c:	2b60      	cmp	r3, #96	; 0x60
 800254e:	d050      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x116>
 8002550:	2b60      	cmp	r3, #96	; 0x60
 8002552:	d877      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x168>
 8002554:	2b50      	cmp	r3, #80	; 0x50
 8002556:	d03c      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0xf6>
 8002558:	2b50      	cmp	r3, #80	; 0x50
 800255a:	d873      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x168>
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d058      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x136>
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d86f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x168>
 8002564:	2b30      	cmp	r3, #48	; 0x30
 8002566:	d064      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x156>
 8002568:	2b30      	cmp	r3, #48	; 0x30
 800256a:	d86b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x168>
 800256c:	2b20      	cmp	r3, #32
 800256e:	d060      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x156>
 8002570:	2b20      	cmp	r3, #32
 8002572:	d867      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x168>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05c      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x156>
 8002578:	2b10      	cmp	r3, #16
 800257a:	d05a      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800257c:	e062      	b.n	8002644 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6899      	ldr	r1, [r3, #8]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f000 f95c 	bl	800284a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	609a      	str	r2, [r3, #8]
      break;
 80025aa:	e04e      	b.n	800264a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f000 f945 	bl	800284a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ce:	609a      	str	r2, [r3, #8]
      break;
 80025d0:	e03b      	b.n	800264a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 f8bc 	bl	800275c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2150      	movs	r1, #80	; 0x50
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f913 	bl	8002816 <TIM_ITRx_SetConfig>
      break;
 80025f0:	e02b      	b.n	800264a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f8da 	bl	80027b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2160      	movs	r1, #96	; 0x60
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f903 	bl	8002816 <TIM_ITRx_SetConfig>
      break;
 8002610:	e01b      	b.n	800264a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	f000 f89c 	bl	800275c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f8f3 	bl	8002816 <TIM_ITRx_SetConfig>
      break;
 8002630:	e00b      	b.n	800264a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f000 f8ea 	bl	8002816 <TIM_ITRx_SetConfig>
        break;
 8002642:	e002      	b.n	800264a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002644:	bf00      	nop
 8002646:	e000      	b.n	800264a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002648:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a25      	ldr	r2, [pc, #148]	; (8002754 <TIM_Base_SetConfig+0xa8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0x28>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0x28>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a22      	ldr	r2, [pc, #136]	; (8002758 <TIM_Base_SetConfig+0xac>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d108      	bne.n	80026e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <TIM_Base_SetConfig+0xa8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <TIM_Base_SetConfig+0x52>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f4:	d003      	beq.n	80026fe <TIM_Base_SetConfig+0x52>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <TIM_Base_SetConfig+0xac>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d108      	bne.n	8002710 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <TIM_Base_SetConfig+0xa8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d103      	bne.n	8002744 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	615a      	str	r2, [r3, #20]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40000400 	.word	0x40000400

0800275c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f023 0201 	bic.w	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 030a 	bic.w	r3, r3, #10
 8002798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	621a      	str	r2, [r3, #32]
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f023 0210 	bic.w	r2, r3, #16
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	031b      	lsls	r3, r3, #12
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	621a      	str	r2, [r3, #32]
}
 800280c:	bf00      	nop
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	f043 0307 	orr.w	r3, r3, #7
 8002838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	609a      	str	r2, [r3, #8]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002864:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	021a      	lsls	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	431a      	orrs	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4313      	orrs	r3, r2
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	609a      	str	r2, [r3, #8]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800289c:	2302      	movs	r3, #2
 800289e:	e041      	b.n	8002924 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a14      	ldr	r2, [pc, #80]	; (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d009      	beq.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ec:	d004      	beq.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a10      	ldr	r2, [pc, #64]	; (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10c      	bne.n	8002912 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	4313      	orrs	r3, r2
 8002908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400

08002938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <__libc_init_array>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	2600      	movs	r6, #0
 8002960:	4d0c      	ldr	r5, [pc, #48]	; (8002994 <__libc_init_array+0x38>)
 8002962:	4c0d      	ldr	r4, [pc, #52]	; (8002998 <__libc_init_array+0x3c>)
 8002964:	1b64      	subs	r4, r4, r5
 8002966:	10a4      	asrs	r4, r4, #2
 8002968:	42a6      	cmp	r6, r4
 800296a:	d109      	bne.n	8002980 <__libc_init_array+0x24>
 800296c:	f000 f822 	bl	80029b4 <_init>
 8002970:	2600      	movs	r6, #0
 8002972:	4d0a      	ldr	r5, [pc, #40]	; (800299c <__libc_init_array+0x40>)
 8002974:	4c0a      	ldr	r4, [pc, #40]	; (80029a0 <__libc_init_array+0x44>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	42a6      	cmp	r6, r4
 800297c:	d105      	bne.n	800298a <__libc_init_array+0x2e>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	f855 3b04 	ldr.w	r3, [r5], #4
 8002984:	4798      	blx	r3
 8002986:	3601      	adds	r6, #1
 8002988:	e7ee      	b.n	8002968 <__libc_init_array+0xc>
 800298a:	f855 3b04 	ldr.w	r3, [r5], #4
 800298e:	4798      	blx	r3
 8002990:	3601      	adds	r6, #1
 8002992:	e7f2      	b.n	800297a <__libc_init_array+0x1e>
 8002994:	080029ec 	.word	0x080029ec
 8002998:	080029ec 	.word	0x080029ec
 800299c:	080029ec 	.word	0x080029ec
 80029a0:	080029f0 	.word	0x080029f0

080029a4 <memset>:
 80029a4:	4603      	mov	r3, r0
 80029a6:	4402      	add	r2, r0
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d100      	bne.n	80029ae <memset+0xa>
 80029ac:	4770      	bx	lr
 80029ae:	f803 1b01 	strb.w	r1, [r3], #1
 80029b2:	e7f9      	b.n	80029a8 <memset+0x4>

080029b4 <_init>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	bf00      	nop
 80029b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ba:	bc08      	pop	{r3}
 80029bc:	469e      	mov	lr, r3
 80029be:	4770      	bx	lr

080029c0 <_fini>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	bf00      	nop
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr
